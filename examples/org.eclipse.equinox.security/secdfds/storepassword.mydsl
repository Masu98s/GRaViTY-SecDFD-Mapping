EDFD storepassword [
	assets: 
		Asset secret
				type: String
				values: [H C], [H I]
				source: Decrypt_file
				targets: Plugin,
		Asset system_encr_password 
				type: Object
				values: [H C], [H I]
				source: Password_store
				targets: Decrypt_file,
		Asset password_external 
				type: String
				values: [H C], [H I]
				source: OS_User
				targets: Read_store,
		Asset encr_password 
				type: Object
				values: [H I]
				source: Read_store
				targets: Cache, Plugin,
		Asset node 
				type: Object
				values: [H I]
				source: Find_node
				targets: Read_cache, Read_store,
		Asset path 
				type: String
				values: [H I]
				source: Plugin
				targets: Find_node,
		Asset fieldID 
				type: String
				values: [H I]
				source: Read_cache
				targets: Read_store, Read_cache
	elements:
		ExternalEntity OS_User[
			assets: password_external
			outgoing flows: user_external_password [num: 7  assets: password_external targets: Read_store]
			attacker: false
		],
		ExternalEntity Plugin[
			assets: path, secret
			//send the path to read the password
			incoming flows: "Read_cache.return_password_from_cache",
							"Read_store.return_password_from_store"
			outgoing flows: get_password [num: 1 assets: path targets: Find_node]
			attacker: false
		],
		DataStore Cache[
			assets: encr_password
			incoming flows: "Read_cache.get_cached_values",
							"Read_store.cache_values"
			outgoing flows: provide_ecrypted_password [num: 4 assets: encr_password targets: Read_cache]	
		],
		DataStore Password_store[
			assets: system_encr_password
			incoming flows: "Read_store.get_stored_values"
			outgoing flows: provide_sys_encr_password [num: 5 assets: system_encr_password targets: Decrypt_file]
		],	
		Process Find_node[
			responsibilities: [path User:: node],
							  [node Forward:: node]
			assets: path, node
			incoming flows: "Plugin.get_password"
			outgoing flows: fwd_node [num: 2 assets: node targets: Read_cache]
		],
		Process Read_cache[
			responsibilities: [node, fieldID User:: node, fieldID],
							  [encr_password Decrypt:: secret]
			assets: encr_password, node, fieldID, secret
			incoming flows: "Find_node.fwd_node",
							"Cache.provide_ecrypted_password"
			outgoing flows: return_password_from_cache [num: 5 assets: secret targets: Plugin],
							get_cached_values [num: 3 assets: fieldID, node targets: Cache],
							invoke_read_from_store [num: 3 assets: fieldID, node targets: Read_store]
		],
		Process Read_store [
			responsibilities: [node, fieldID User:: node, fieldID],
							  [secret Forward:: secret],
							  [encr_password Store:: encr_password]
			assets: fieldID, node, password_external, secret, encr_password
			incoming flows: "OS_User.user_external_password",
							"Decrypt_file.provide_password",
							"Read_cache.invoke_read_from_store"
			outgoing flows: return_password_from_store [num: 8 assets: secret targets: Plugin],
							get_stored_values [num: 4 assets: fieldID, node targets: Password_store],
							cache_values [num: 9 assets: encr_password targets: Cache]
			
		],
		Process Decrypt_file [
			responsibilities: [system_encr_password Decrypt:: secret]
			assets: system_encr_password, secret
			incoming flows: "Password_store.provide_sys_encr_password"
			outgoing flows: provide_password [num: 6 assets: secret targets: Read_store]
		]
	
	
]