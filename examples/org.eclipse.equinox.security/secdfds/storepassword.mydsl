EDFD storepassword [
	assets:
		//CryptoData data = new CryptoData(encryptedValue); SecurePreferences.java
		Asset data
				type: String
				values: [H C], [H I]
				source: Cache
				targets: Get_value,
		//any String, the return value of public String get(String key, String def, SecurePreferencesContainer container)
		Asset secret
				type: String
				values: [H C], [H I]
				source: Decrypt_data
				targets: Plugin,
//		Asset system_encr_password 
//				type: Object
//				values: [H C], [H I]
//				source: Password_store
//				targets: Decrypt_file,
		// passwordExternal in SecurePreferences.java (PasswordExt passwordExt = getRoot().getPassword(moduleID, container, false);)
		Asset password_external 
				type: Object
				values: [H C], [H I]
				source: OS_User
				targets: Decrypt_data,
		//maps to the same as data! CryptoData data = new CryptoData(encryptedValue); SecurePreferences.java
		Asset encrypted_data 
				type: Object
				values: [H I]
				source: Cache
				targets: Decrypt_data,
		// node in ISecurePreferences or SecurePreferences or SecurePreferences Wrapper
		Asset node 
				type: Object
				values: [H I]
				source: Find_node
				targets: Get_value,
		//any String! pathName in public SecurePreferences node(String pathName) or ISecurePreferences node(String pathName) (in the wrapper)
		Asset path 
				type: String
				values: [H I]
				source: Plugin
				targets: Find_node,
		//any String! key in public String get(String key, String def) 
		Asset fieldID 
				type: String
				values: [H I]
				source: Find_node
				targets: Cache
	elements:
		ExternalEntity OS_User[
			assets: password_external
			outgoing flows: user_external_password [num: 6  assets: password_external targets: Get_Password_External]
			attacker: false
		],
		ExternalEntity Plugin[
			assets: path, secret
			//send the path to read the password
			incoming flows: "Get_value.return_secret_from_cache",
							"Decrypt_data.return_decrypted_secret"
			outgoing flows: get_password [num: 1 assets: path targets: Find_node]
			attacker: false
		],
		// values Map in SecurePreferences.java
		DataStore Cache[
			assets: data, encrypted_data
			incoming flows: "Get_value.get_cached_values"
			outgoing flows: provide_cache_data [num: 4 assets: data, encrypted_data targets: Get_value]	
		],
//		DataStore Password_store[
//			assets: system_encr_password
//			incoming flows: "Read_store.get_stored_values"
//			outgoing flows: provide_sys_encr_password [num: 5 assets: system_encr_password targets: Decrypt_file]
//		],	
		//public SecurePreferences node(String pathName), and in SecurePreferencesWrapper, and protected SecurePreferences navigateToNode(String pathName, boolean create)
		Process Find_node[
			responsibilities: [path User:: node],
							  [node Forward:: node]
			assets: path, node, fieldID
			incoming flows: "Plugin.get_password"
			outgoing flows: fwd_node [num: 2 assets: node, fieldID targets: Get_value]
		],
		// internalGet(key); in SecurePreferences.java
		Process Get_value[
			responsibilities: [node, fieldID User:: node, fieldID],
							  [data Forward:: secret],
							  [encrypted_data Forward:: encrypted_data]
			assets: encrypted_data, data, node, fieldID, secret
			incoming flows: "Find_node.fwd_node",
							"Cache.provide_cache_data"
			outgoing flows: return_secret_from_cache [num: 5 assets: secret targets: Plugin],
							get_cached_values [num: 3 assets: fieldID, node targets: Cache],
							invoke_decrypt_process [num: 5 assets: encrypted_data targets: Decrypt_data]
		],
//		Process Read_store [
//			responsibilities: [node, fieldID User:: node, fieldID],
//							  [secret Forward:: secret],
//							  [encr_password Store:: encr_password]
//			assets: fieldID, node, password_external, secret, encr_password
//			incoming flows: "OS_User.user_external_password",
//							"Decrypt_data.provide_password",
//							"Get_value.invoke_read_from_store"
//			outgoing flows: return_password_from_store [num: 8 assets: secret targets: Plugin],
//							get_stored_values [num: 4 assets: fieldID, node targets: Password_store],
//							cache_values [num: 9 assets: encr_password targets: Cache]
//			
//		],
		//maps to public PasswordExt getPassword(String moduleID, IPreferencesContainer container, boolean encryption) or getModulePassword() in SecurePreferencesRoot.java
		Process Get_Password_External[
			responsibilities: [password_external Forward:: password_external]
			assets: password_external
			incoming flows: "OS_User.user_external_password"
			outgoing flows: fwd_password_external [num: 7 assets: password_external targets: Decrypt_data]
		],
		//maps to public byte[] decrypt(PasswordExt passwordExt, CryptoData encryptedData) or internalDecrypt() in JavaEncryption.java
		Process Decrypt_data [
			responsibilities: [password_external, encrypted_data Decrypt:: secret]
			assets: password_external, encrypted_data, secret
			incoming flows: "Get_Password_External.fwd_password_external"
			outgoing flows: return_decrypted_secret [num: 8 assets: secret targets: Plugin]
		]
	
	
]