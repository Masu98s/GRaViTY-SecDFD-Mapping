/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.validation;

import com.google.common.base.Objects;
import eDFDFlowTracking.Asset;
import eDFDFlowTracking.DataStore;
import eDFDFlowTracking.EDFDFlowTrackingPackage;
import eDFDFlowTracking.NamedEntity;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.xtext.example.mydsl.validation.AbstractMyDslValidator;
import org.xtext.example.mydsl.validation.SProblem;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class MyDslValidator extends AbstractMyDslValidator {
  private static Map<String, Set<String>> map = new HashMap<String, Set<String>>();
  
  private static Set<SProblem> problems;
  
  public static Map<String, Set<String>> setMap(final Map<String, Set<String>> newMap) {
    return MyDslValidator.map = newMap;
  }
  
  public static Set<SProblem> setProblems(final Set<SProblem> pr) {
    return MyDslValidator.problems = pr;
  }
  
  public static final String COMPLIANCE_ABSENCE = "absent in implementation";
  
  public static final String SECURITY_COMPLIANCE_ABSENCE = "security absent in implementation";
  
  @Check(CheckType.FAST)
  public void AbsenceInImplementation(final EObject eobject) {
    if ((((eobject instanceof DataStore) || (eobject instanceof eDFDFlowTracking.Process)) || (eobject instanceof Asset))) {
      boolean _containsKey = MyDslValidator.map.containsKey(((NamedEntity) eobject).getName());
      if (_containsKey) {
        String message = "The element has been mapped to ";
        final Set<String> pm = MyDslValidator.map.get(((NamedEntity) eobject).getName());
        String _message = message;
        String _string = Integer.toString(pm.size());
        message = (_message + _string);
        String _message_1 = message;
        message = (_message_1 + " elements:");
        for (final String sig : pm) {
          String _message_2 = message;
          message = (_message_2 + ("\n" + sig));
        }
        this.info(message, EDFDFlowTrackingPackage.Literals.NAMED_ENTITY__NAME, MyDslValidator.COMPLIANCE_ABSENCE);
      } else {
        this.warning("Absence of asset in implementation. Please create a mapping or modify the code.", 
          EDFDFlowTrackingPackage.Literals.NAMED_ENTITY__NAME, 
          MyDslValidator.COMPLIANCE_ABSENCE);
      }
    }
  }
  
  @Check(CheckType.FAST)
  public void SecurityAbsenceInImplementation(final EObject eobject) {
    if ((eobject instanceof eDFDFlowTracking.Process)) {
      for (final SProblem sp : MyDslValidator.problems) {
        EObject _dfdElement = sp.getDfdElement();
        boolean _equals = ((eDFDFlowTracking.Process) _dfdElement).getName().equals(((eDFDFlowTracking.Process)eobject).getName());
        if (_equals) {
          SProblem.PState _state = sp.getState();
          boolean _equals_1 = Objects.equal(_state, SProblem.PState.OK);
          if (_equals_1) {
            this.info(sp.getDescription(), EDFDFlowTrackingPackage.Literals.NAMED_ENTITY__NAME, 
              MyDslValidator.SECURITY_COMPLIANCE_ABSENCE);
          } else {
            this.error(sp.getDescription(), EDFDFlowTrackingPackage.Literals.NAMED_ENTITY__NAME, 
              MyDslValidator.SECURITY_COMPLIANCE_ABSENCE);
          }
        }
      }
    }
  }
}
