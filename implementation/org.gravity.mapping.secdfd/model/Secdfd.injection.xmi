<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.gravity.mapping.secdfd.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD"/>
  </importInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pm&quot;, pm);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;pm&quot;,pm);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;edfd&quot;, edfd);&#xA;ruleresult.registerObject(&quot;pm&quot;, pm);&#xA;ruleresult.registerObject(&quot;pm2Graph&quot;, pm2Graph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pm&quot;).eClass()).equals(&quot;basic.TypeGraph.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;edfd&quot;, edfd);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;edfd&quot;,edfd);&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;edfd&quot;, edfd);&#xA;ruleresult.registerObject(&quot;pm&quot;, pm);&#xA;ruleresult.registerObject(&quot;pm2Graph&quot;, pm2Graph);&#xA;">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;edfd&quot;).eClass()).equals(&quot;eDFDFlowTracking.EDFD.&quot;);">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeGraph2EDFD&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;TypeGraph2EDFD&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/org.gravity.mapping.secdfd/model/Secdfd.ecore#//Rules/TypeGraph2EDFD/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
</sdmUtil:CompilerInjection>
